// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // Cambiar a "postgresql" en producci√≥n
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          String    @default("USER")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  products      Product[]
  auditLogs     AuditLog[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Product {
  id          String        @id @default(cuid())
  name        String
  type        String
  description String?
  url         String?
  owner       String?
  status      String        @default("DRAFT")
  visibility  String        @default("INTERNAL")

  // Metadatos SUNASS
  eps         String?
  region      String?
  district    String?
  topic       String?
  period      String?
  source      String?

  // Timestamps
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  createdById String
  createdBy   User          @relation(fields: [createdById], references: [id])
  tags        ProductTag[]
  auditLogs   AuditLog[]

  @@index([status])
  @@index([type])
  @@index([createdById])
  @@index([visibility])
  @@map("products")
}

model Tag {
  id       String       @id @default(cuid())
  name     String       @unique
  products ProductTag[]

  @@map("tags")
}

model ProductTag {
  productId String
  tagId     String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([productId, tagId])
  @@map("product_tags")
}

model AuditLog {
  id        String      @id @default(cuid())
  entity    String
  entityId  String
  action    String
  userId    String?
  user      User?       @relation(fields: [userId], references: [id])
  productId String?
  product   Product?    @relation(fields: [productId], references: [id])
  diff      String? // JSON string
  timestamp DateTime    @default(now())

  @@index([entity, entityId])
  @@index([userId])
  @@index([timestamp])
  @@map("audit_logs")
}
